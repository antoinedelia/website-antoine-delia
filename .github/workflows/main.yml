name: 'Build and Deploy'

on:
  push:
    branches:
    - master
  pull_request:
  workflow_dispatch:

jobs:
  deploy-infra:
    name: 'Deploy AWS infrastructure'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    outputs:
      s3_bucket_name: ${{ steps.terraform_outputs.outputs.s3_bucket_name }}
      cloudfront_distribution_id: ${{ steps.terraform_outputs.outputs.cloudfront_distribution_id }}


    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Format
      working-directory: ./terraform
      run: terraform fmt -check

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve

    - name: Get Terraform Outputs
      id: terraform_outputs
      working-directory: ./terraform
      run: |
        echo "s3_bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
        echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

  build-and-deploy-website:
    name: 'Build & Deploy React website'
    runs-on: ubuntu-latest
    needs: deploy-infra
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Build project
        working-directory: ./web
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Deploy to S3
        working-directory: ./web
        run: |
          aws s3 sync ./dist s3://${{ needs.deploy-infra.outputs.s3_bucket_name }} --delete

      - name: Invalidate CloudFront Distribution
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ needs.deploy-infra.outputs.cloudfront_distribution_id }} --paths "/*"
